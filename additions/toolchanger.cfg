### STANDARD VCORE OVERRIDE

[stepper_y]
homing_positive_dir: false
position_endstop: 0

[display_status]

[respond]

[save_variables]
filename:  ~/klipper_config/variables.cfg

[include btt-octopus-11/config.cfg]
[include board.cfg]

[filament_switch_sensor tool_detect]
switch_pin: tools:c_detect_pin
pause_on_runout: False
event_delay: 0.0001

[filament_switch_sensor coupler_locked]
switch_pin: tools:c_locked_pin
pause_on_runout: False
event_delay: 0.0001

[filament_switch_sensor coupler_unlocked]
switch_pin: tools:c_unlocked_pin
pause_on_runout: False
event_delay: 0.0001

###
### COUPLER
###

[toollock]
purge_on_toolchange = True
init_printer_to_last_tool = True
tool_lock_gcode:
  COUPLER_LOCK
tool_unlock_gcode:
  COUPLER_UNLOCK

[gcode_macro TOOL_DROPOFF]
gcode:
  T_1
  ASSERT_TOOL_NOT_DETECTED

[gcode_macro COUPLER_LOCK]
variable_speed: 60
gcode:
  SAVE_GCODE_STATE NAME=TOOL_LOCK_STATE

  G4 P500

  MANUAL_STEPPER STEPPER=coupler ENABLE=1
  MANUAL_STEPPER STEPPER=coupler SET_POSITION=0
  MANUAL_STEPPER STEPPER=coupler MOVE=-150 SPEED={speed} SYNC=1
  M400
  ASSERT_COUPLER_LOCKED

  RESTORE_GCODE_STATE NAME=TOOL_LOCK_STATE MOVE=0
  M117 "Unknown tool loaded"

[gcode_macro TOOL_LOCK_CHECK]
description: Check so the tool is mounted by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.
gcode:
  #SET_TMC_CURRENT STEPPER=coupler CURRENT=1.0
  #MANUAL_STEPPER STEPPER=coupler Move=-10 SPEED=10 SYNC=0
  #G4 P10
  #SET_TMC_CURRENT STEPPER=coupler CURRENT=0.8

[gcode_macro COUPLER_UNLOCK]
variable_speed: 60
gcode:
  SAVE_GCODE_STATE NAME=TOOL_UNLOCK_STATE

  G4 P500

  MANUAL_STEPPER STEPPER=coupler ENABLE=1
  MANUAL_STEPPER STEPPER=coupler SET_POSITION=0
  MANUAL_STEPPER STEPPER=coupler MOVE=150 SPEED={speed} SYNC=1 STOP_ON_ENDSTOP=1
  M400
  ASSERT_COUPLER_UNLOCKED

  RESTORE_GCODE_STATE NAME=TOOL_UNLOCK_STATE MOVE=0
  M117 "Tool unloaded"

[gcode_macro ASSERT_COUPLER_LOCKED]
gcode:
  {% if not printer["filament_switch_sensor coupler_locked"].filament_detected %}
    {action_raise_error("Coupler failed to lock")}
    # TODO: we probably want to freeze the machine here. We may need different PAUSE macros
    # one for freezing in place and one for pausing a print.
    # PAUSE to allow investigation of the failed coupling attempt
    #PAUSE
    M117 "COUPLER NOT LOCKED (ERROR)"
  {% else %}
    M117 "COUPLER LOCKED (OK)"
  {% endif %}

[gcode_macro ASSERT_COUPLER_UNLOCKED]
gcode:
  {% if not printer["filament_switch_sensor coupler_unlocked"].filament_detected %}
    {action_raise_error("Coupler failed to unlock")}
    #PAUSE
    M117 "COUPLER NOT UNLOCKED (ERROR)"
  {% else %}
    M117 "COUPLER UNLOCKED (OK)"
  {% endif %}

[gcode_macro ASSERT_TOOL_DETECTED]
gcode:
  {% if not printer["filament_switch_sensor tool_detect"].filament_detected %}
    #{action_raise_error("Tool not detected")}
    #PAUSE
    M117 "TOOL NOT DETECTED (ERROR)"
  {% else %}
    M117 "TOOL DETECTED (OK)"
  {% endif %}

[gcode_macro ASSERT_TOOL_NOT_DETECTED]
gcode:
  {% if printer["filament_switch_sensor tool_detect"].filament_detected %}
      {action_raise_error("Tool detected")}
      #PAUSE
    M117 "TOOL DETECTED (ERROR)"
  {% else %}
    M117 "TOOL NOT DETECTED (OK)"
  {% endif %}

###
### TOOLS
###

[toolgroup 0]
is_virtual: False
idle_to_standby_time: 30
idle_to_powerdown_time: 600
pickup_gcode: 
  SUB_TOOL_PICKUP_START T={myself.name}
  SUB_TOOL_PICKUP_END T={myself.name}
dropoff_gcode:
  SUB_TOOL_DROPOFF_START T={myself.name}
  SUB_TOOL_DROPOFF_END T={myself.name}

[tool 0]
tool_group: 0
extruder: extruder
fan: part_fan_t0
zone: 10.0,300.0
park: 10.0,335.0
offset: -33.559,-87.559,2.7
meltzonelength: 10
lazy_home_when_parking: 1

[tool 1]
tool_group: 0
extruder: extruder1
fan: part_fan_t1
zone: 86.5,300.0
park: 86.5,335.0
offset: -33.47,-87.943,3.25
meltzonelength: 10
lazy_home_when_parking: 1

###
### PICKUP
###

[gcode_macro SUB_TOOL_PICKUP_START]
description: Internal subroutine
  T: Tool to pickup
variable_zone_speed: 10000
variable_park_speed: 6000
variable_safe_zone_y: 300
gcode:
  {%set myself = printer['tool '~params.T]%}
  {%set toollock = printer['toollock']%}

  M568 P{myself.name} A2

  SAVE_GCODE_STATE NAME=TOOL_PICKUP_STATE
  G90

  ##############  Move in to zone  ##############
  {% if printer.toolhead.position.y|int > safe_zone_y %}
    G0 Y{safe_zone_y} F{zone_speed}
  {% endif %}
  G0 X{myself.zone[0]} Y{myself.zone[1]} F{zone_speed}

  ##############  Move in to parking spot  ##############
  G0 X{myself.park[0]} Y{myself.park[1]|float - 10} F{park_speed}
  G0 X{myself.park[0]} Y{myself.park[1]} F{park_speed / 2}

  ##############  Lock Tool  ##############
  M400
  TOOL_LOCK
  SET_GCODE_OFFSET Z={toollock.global_offset[2]|float + myself.offset[2]|float} MOVE=1                   # Set and move the Z offset. Avoid crashing into bed when moving out later.

  ##############  Wait for heater  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    M116 P{myself.name}                                             # Wait for tool to reach target temperature.
  {% endif %}

  ##############  Move out to zone  ##############
  G0 X{myself.zone[0]} Y{myself.zone[1]} F{zone_speed}


[gcode_macro SUB_TOOL_PICKUP_END]
description: Internal subroutine
  T: Tool to pickup
variable_zone_speed: 10000
variable_safe_zone_y: 300
gcode:
  {%set myself = printer['tool '~params.T]%}
  {%set toollock = printer['toollock']%}
  
  ##############  Move out to Safe position  ##############
  G0 Y{safe_zone_y} F{zone_speed}

  ##############  Check Tool Lock  ##############
  #TOOL_LOCK_CHECK
  ASSERT_TOOL_DETECTED
 
  ##############  Finnish up  ##############
  M400
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP_STATE MOVE=0
  
  SET_GCODE_OFFSET X={toollock.global_offset[0]|float + myself.offset[0]|float} Y={toollock.global_offset[1]|float + myself.offset[1]|float} Z={toollock.global_offset[2]|float + myself.offset[2]|float} MOVE=0
  
  SAVE_GCODE_STATE NAME=TOOL_PICKUP2                            # Save state for priming nozzle
  RESPOND MSG="First if:{myself.extruder|default("none")|lower}"
  ##############  Prime the filament, asume it was retracted as per e3d Revo documentation  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    RESPOND MSG="First if1:{myself.extruder|default("none")|lower}"
    RESPOND MSG="Second if:{printer[myself.extruder].can_extrude|default("false")|lower}"
    RESPOND MSG="Second if1:{printer.toollock.purge_on_toolchange}"
                                                                  # If can extrude and global purge is active:
    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.toollock.purge_on_toolchange %}
      RESPOND MSG="Second if2:{printer[myself.extruder].can_extrude|default("false")|lower}"
      RESPOND MSG="Second if3:{printer.toollock.purge_on_toolchange}"
      M83                                                           # Relative extrusion
      G1 E{myself.meltzonelength|int - 2} F1300                     # DeRetract filament from meltzone
      G1 E2 F400                                                    # DeRetract filament from meltzone
    {% endif %}
  {% endif %}
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP2                          # Restore state after priming nozzle
  G1 F30000
  
###
### DROPOFF
###

[gcode_macro SUB_TOOL_DROPOFF_START]
description: Internal subroutine
  T: Tool to pickup
variable_zone_speed: 10000
variable_park_speed: 6000
variable_safe_zone_y: 300
gcode:
  {%set myself = printer['tool '~params.T]%}

  {% if myself.name|int != printer.toollock.tool_current|int %}
    { action_raise_error("SUB_TOOL_DROPOFF_START: Wrong tool. Asked to dropoff T" ~ myself.name ~ " while current is T" ~ printer.toollock.tool_current ~ ".") }
  {% endif %}

  RESPOND MSG="Will drop off T{myself.name} at X{myself.park[0]} Y{myself.park[1]}"

   ##############  Retract the filament as per e3d Revo documentation  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    M568 P{myself.name} A1                                        # Put tool heater in standby

                                                                  # If can extrude and global purge is active:
    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.toollock.purge_on_toolchange %}
      M83                                                           # Relative extrusion
      G1 E-4 F2700                                                  # retract filament from meltzone
      G1 E2 F800                                                    # Extrude slightly to form a tip
      G1 E-{myself.meltzonelength|int - 2} F800                     # Retract filament from meltzone
    {% endif %}
  {% endif %}

  SET_GCODE_OFFSET X=0 Y=0                                      # Set XY offset to 0 so we park the tool right.
  SAVE_GCODE_STATE NAME=TOOL_DROPOFF_STATE
  G90

  ##############  Move in to zone  ##############
  {% if printer.toolhead.position.y|float > safe_zone_y %}
    G0 Y{safe_zone_y} F{zone_speed}
  {% endif %}
  G0 X{myself.zone[0]} Y{myself.zone[1]} F{zone_speed}

  ##############  Move in to parking spot  ##############
  G0 X{myself.park[0]} Y{myself.park[1]|int - 10} F{park_speed}
  G0 X{myself.park[0]} Y{myself.park[1]} F{park_speed / 2}


[gcode_macro SUB_TOOL_DROPOFF_END]
description: Internal subroutine
  T: Tool to pickup
variable_zone_speed: 10000
variable_park_speed: 6000
variable_safe_zone_y: 300
gcode:
  {%set myself = printer['tool '~params.T]%}

  M400
  TOOL_UNLOCK

  G0 X{myself.zone[0]} Y{myself.zone[1]} F{park_speed}
  G0 Y{safe_zone_y} F{zone_speed}
  M400

  RESTORE_GCODE_STATE NAME=TOOL_DROPOFF_STATE MOVE=0


###
### MACROS
###

[gcode_macro M106]
description: Snnn Pnnn
  Set fan speed. A tool and toollock must be configured for this to work.
  S: Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  P: Tool (optional, defaults to the currently selected tool)
  The P parameter specifies tool instead of fan number as in RRF.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # S= Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " S="~params.S %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " P="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  SET_AND_SAVE_FAN_SPEED{newparameters}

[gcode_macro M107]
description: Pnnn
  Turn off fan.
  P = Tool (optional and defaults to the currently selected tool)
gcode:       
  {% if params.P is defined %}
    {% set p = " P"~params.P %}
  {% endif %}
  M106 {p|default("")} S0
  

[gcode_macro G10]
description: See M568. Passtrough to M568.
gcode:
  M568 {rawparams}

[gcode_macro M568]
description: Pnnn Rnnn Snnn An Nnnn Mnnn
  Set tool temperature.
  P= Tool number, optional. If this parameter is not provided, the current tool is used.
  R= Standby temperature(s), optional
  S= Active temperature(s), optional
  A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature(s).
  N = Time in seconds to wait between changing heater state to standby and setting heater target temperature to standby temperature when standby temperature is lower than tool temperature.
      Use for example 0.1 to change immediately to standby temperature.
  O = Time in seconds to wait from docking tool to shutting off the heater, optional.
      Use for example 86400 to wait 24h if you want to disable shutdown timer.
gcode:
  #  RESPOND MSG="M568: Seting new temperature: {rawparams}"
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # R= Standby temperature
  {% if params.R is defined %}
    {% set newparameters = newparameters ~ " STDB_TMP="~params.R %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # S= Active temperature
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " ACTV_TMP="~params.S %}                    # Set heater_active_temp to new parameters.
  {% endif %}

  # N = Time in seconds to wait from docking tool to putting the heater in standy
  {% if params.N is defined %}
    {% set newparameters = newparameters ~ " STDB_TIMEOUT="~params.N %}                  # Set idle_to_standby_time to new parameters.
  {% endif %}

  # M = Time in seconds to wait from docking tool to shuting off the heater
  {% if params.O is defined %}
    {% set newparameters = newparameters ~ " SHTDWN_TIMEOUT="~params.O %}                  # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  # A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature
  {% if params.A is defined %}
    {% set newparameters = newparameters ~ " CHNG_STATE="~params.A %}                            # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  {action_respond_info("M568: Running: SET_TOOL_TEMPERATURE"~newparameters)}
  SET_TOOL_TEMPERATURE{newparameters}

[gcode_macro M116]
description: Pnnn Hnnn Snnn
  Waits for all temperatures, or a specified tool or heater's temperature.
  This command can be used without any additional parameters.
  Without parameters it waits for bed and current extruder.
  Only one of either P or H may be used.
  Pnnn Tool number.
  Hnnn Heater number. 0="heater_bed", 1="extruder", 2="extruder1", etc.
  Snnn Tolerance in degC. Defaults to 1*C. Wait will wait until heater is between set temperature +/- tolerance.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutine in new format.
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL=" ~ params.P %}                   # Set Tool to new parameters.
  {% endif %}
  {% if params.H is defined %}
    {% set newparameters = newparameters ~ " HEATER=" ~ params.H %}                   # Set Tool to new parameters.
  {% endif %}
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " TOLERANCE=" ~ params.S %}                   # Set Tool to new parameters.
  {% endif %}
  TEMPERATURE_WAIT_WITH_TOLERANCE{newparameters}

###
###
###

[gcode_macro G28]
rename_existing: G990028
variable_do_x: 0
variable_do_y: 0
variable_do_z: 0
gcode:
  { action_respond_info("G28 running: "~rawparams) }

  {% set do_x = 0 %}
  {% set do_y = 0 %}
  {% set do_z = 0 %}

  {% if params.Y is defined %}
    ## for y home just y
    {% set do_y = 1 %} 
  {% endif %}

  {% if params.X is defined %}
    ## for x home y first then X
    {% set do_x = 1 %} 
  {% endif %}

  {% if params.Z is defined %}
    ## for z home just z
    {% set do_z = 1 %} 
  {% endif %}

  {% if do_y == 1 %}
    RESPOND PREFIX="info" MSG="Home > Todo: Y"
  {% endif %}
  {% if do_x == 1 %}
    RESPOND PREFIX="info" MSG="Home > Todo: X"
  {% endif %}
  {% if do_z == 1 %}
    RESPOND PREFIX="info" MSG="Home > Todo: Z"
  {% endif %}

  {% if do_x == 0 and do_y == 0 and do_z == 0 %}
    {% set do_x = 1 %} 
    {% set do_y = 1 %} 
    {% set do_z = 1 %} 
    RESPOND PREFIX="info" MSG="Home > Doing all XYZ"
  {% endif %}

  {% if do_x == 1 %}
    RESPOND PREFIX="info" MSG="Homing > X"
    G90
    G990028 X0
    G91
    G0 X5 F2000
    G90
  {% endif %}

  {% if do_y == 1 %}
    RESPOND PREFIX="info" MSG="Home > Y"
    G90
    G990028 Y0
    G91
    G0 Y5 F2000
    G90
  {% endif %}

  {% if do_z == 1 %}
    RESPOND PREFIX="info" MSG="Homing > Z"
    HOME_Z
  {% endif %}

  RESPOND PREFIX="info" MSG="Homing > Done"

[gcode_macro HOME_Z]
gcode:
  # To home Z, we first must home X and Y.
  {% if 'x' not in printer.toolhead.homed_axes %}
    G28 X
  {% endif %}

  {% if 'y' not in printer.toolhead.homed_axes %}
    G28 Y
  {% endif %}

  TOOL_DROPOFF

  RESPOND PREFIX="info" MSG="Homing > Z"
  SET_KINEMATIC_POSITION Z=0
  
  G90
  G0 X150 Y150 F6000
  G990028 Z0
  G0 Z10


[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
  CLEAR_PAUSE
  # SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # Home if needed
  MAYBE_HOME
  M117 Heating bed...
  RESPOND MSG="Heating bed..."
  # Wait for bed to heat up
  M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) }
  # Run the customizable "AFTER_HEATING_BED" macro.
  _START_PRINT_AFTER_HEATING_BED
  # Run the customizable "BED_MESH" macro
  _START_PRINT_BED_MESH
  # SUGGEST: RESTORE_GCODE_STATE NAME=start_print_state

  ### NEEDS TOOL
  #TOOL_PICKUP T={params.INITIAL_TOOL|0}
  T0

  G90
  # Start heating extruder
  #M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # Run the customizable "PARK" macro
  #_START_PRINT_PARK
  # Wait for extruder to heat up
  #M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  #_START_PRINT_AFTER_HEATING_EXTRUDER
  M117 Printing...
  RESPOND MSG="Printing..."
  # ORIGINAL: RESTORE_GCODE_STATE NAME=start_print_state
  # Set extrusion mode based on user configuration
  M83
  G92 E0

[gcode_macro END_PRINT]
description: End print procedure, use this in your Slicer.
gcode:
  SAVE_GCODE_STATE NAME=end_print_state
  _END_PRINT_BEFORE_HEATERS_OFF
  TURN_OFF_HEATERS

  _END_PRINT_AFTER_HEATERS_OFF
  TOOL_DROPOFF
  M400

  _END_PRINT_PARK
  # Clear skew profile if any was loaded.
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    SET_SKEW CLEAR=1
  {% endif %}
  # Steppers off
  M84
  # Part cooling fan off
  #M107
  M117 Done :)
  RESPOND MSG="Done :)"
  RESTORE_GCODE_STATE NAME=end_print_state

[gcode_macro PAUSE]
description: Pauses the printer
rename_existing: PAUSE_BASE
variable_extrude: 1.5
gcode:
  SAVE_GCODE_STATE NAME=PAUSE_state
  # Define park positions 
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  PAUSE_BASE
  SET_GCODE_OFFSET X=0 Y=0
  G28 XY
  G91
  # Retract
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  # Move to park position
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    _PARK LOCATION={printer["gcode_macro RatOS"].pause_print_park_in} X={printer["gcode_macro RatOS"].pause_print_park_x}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro GET_GLOBAL_OFFSET]
description: Get the current global offset
gcode:
  {%set toollock = printer['toollock']%}

  RESPOND MSG="Global Offset: X={toollock.global_offset[0]} Y={toollock.global_offset[1]} Z={toollock.global_offset[2]}"

[gcode_macro GET_TOOL_OFFSET]
description: Get the current offset for a tool
  Tn: Tool index
gcode:
  {%set tool = printer['tool '~params.T]%}

  RESPOND MSG="Tool {params.T} Offset: X={tool.offset[0]} Y={tool.offset[1]} Z={tool.offset[2]}"
