### STANDARD VCORE OVERRIDE

[stepper_y]
homing_positive_dir: false
position_endstop: 0

[display_status]

[respond]

[save_variables]
filename:  ~/klipper_config/variables.cfg

[include mks-rumba32/config.cfg]
[include board.cfg]

[filament_switch_sensor tool_detect]
switch_pin: tools:PD10
pause_on_runout: False
event_delay: 0.0001

[filament_switch_sensor coupler_locked]
switch_pin: tools:c_locked_pin
pause_on_runout: False
event_delay: 0.0001

[filament_switch_sensor coupler_unlocked]
switch_pin: tools:c_unlocked_pin
pause_on_runout: False
event_delay: 0.0001

###
### COUPLER
###

[toollock]
purge_on_toolchange = True
init_printer_to_last_tool = True
tool_lock_gcode:
  COUPLER_LOCK
tool_unlock_gcode:
  COUPLER_UNLOCK

[gcode_macro TOOL_DROPOFF]
gcode:
  T_1

[gcode_macro COUPLER_LOCK]
variable_speed: 60
gcode:
  SAVE_GCODE_STATE NAME=TOOL_LOCK_STATE

  MANUAL_STEPPER STEPPER=coupler ENABLE=1
  MANUAL_STEPPER STEPPER=coupler SET_POSITION=0
  MANUAL_STEPPER STEPPER=coupler MOVE=-150 SPEED={speed} SYNC=1
  M400
  #QUERY_ENDSTOPS
  ASSERT_COUPLER_LOCKED

  RESTORE_GCODE_STATE NAME=TOOL_LOCK_STATE MOVE=0
  M117 "Unknown tool loaded"

[gcode_macro TOOL_LOCK_CHECK]
description: Check so the tool is mounted by slightly advancing the lock again until hit endstop, only if endstop not already hit. Do not wait for it to finish.
gcode:
  #SET_TMC_CURRENT STEPPER=coupler CURRENT=1.0
  #MANUAL_STEPPER STEPPER=coupler Move=-10 SPEED=10 SYNC=0
  #G4 P10
  #SET_TMC_CURRENT STEPPER=coupler CURRENT=0.8

[gcode_macro COUPLER_UNLOCK]
variable_speed: 60
gcode:
  SAVE_GCODE_STATE NAME=TOOL_UNLOCK_STATE

  MANUAL_STEPPER STEPPER=coupler ENABLE=1
  MANUAL_STEPPER STEPPER=coupler SET_POSITION=0
  MANUAL_STEPPER STEPPER=coupler MOVE=150 SPEED={speed} SYNC=1 STOP_ON_ENDSTOP=1
  M400
  #QUERY_ENDSTOPS
  ASSERT_COUPLER_UNLOCKED

  RESTORE_GCODE_STATE NAME=TOOL_UNLOCK_STATE MOVE=0
  M117 "Tool unloaded"

[gcode_macro ASSERT_COUPLER_LOCKED]
gcode:
  {% if not printer["filament_switch_sensor coupler_locked"].filament_detected %}
    #{action_raise_error("Coupler failed to lock")}
    # TODO: we probably want to freeze the machine here. We may need different PAUSE macros
    # one for freezing in place and one for pausing a print.
    # PAUSE to allow investigation of the failed coupling attempt
    #PAUSE
    M117 "COUPLER NOT LOCKED"
  {% else %}
    M117 "COUPLER LOCKED"
  {% endif %}

[gcode_macro ASSERT_COUPLER_UNLOCKED]
gcode:
  {% if not printer["filament_switch_sensor coupler_unlocked"].filament_detected %}
      #{action_raise_error("Coupler failed to unlock")}
      #PAUSE
    M117 "COUPLER NOT UNLOCKED"
  {% else %}
    M117 "COUPLER UNLOCKED"
  {% endif %}

[gcode_macro ASSERT_TOOL_DETECTED]
gcode:
  {% if not printer["filament_switch_sensor tool_detect"].filament_detected %}
      #{action_raise_error("Tool not detected")}
      #PAUSE
    M117 "TOOL NOT DETECTED"
  {% else %}
    M117 "TOOL DETECTED"
  {% endif %}

###
### TOOLS
###

[toolgroup 0]
is_virtual: False
idle_to_standby_time: 30
idle_to_powerdown_time: 600
pickup_gcode: 
  SUB_TOOL_PICKUP_START T={myself.name}
  SUB_TOOL_PICKUP_END T={myself.name}
dropoff_gcode:
  SUB_TOOL_DROPOFF_START T={myself.name}
  SUB_TOOL_DROPOFF_END T={myself.name}

##### Selectable tool. Must be configured after [toolgroup n].
[tool 0]
tool_group: 0                     # Must be used and configured before this tool
#extruder: extruder
#fan: partfan_t0
zone: 10.0,300.0
park: 10.0,333.5
offset: -33,-88,2.0
meltzonelength: 10
lazy_home_when_parking: 0           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.

[tool 1]
tool_group: 0                     # Must be used and configured before this tool
#extruder: extruder
#fan: partfan_t0
zone: 83.0,300.0
park: 83.0,333.5
offset: -40,-90,2.0
meltzonelength: 10
lazy_home_when_parking: 0           # (default: 0 - disabled) - When set to 1, will home unhomed XY axes if needed and will not move any axis if already homed and parked. 2 Will also home Z if not homed.

###
### PICKUP
###

[gcode_macro SUB_TOOL_PICKUP_START]
description: Internal subroutine
  T: Tool to pickup
variable_zone_speed: 10000
variable_park_speed: 6000
variable_safe_zone_y: 300
gcode:
  {%set myself = printer['tool '~params.T]%}

  M568 P{myself.name} A2                                               # Put tool heater in Active mode

  SAVE_GCODE_STATE NAME=TOOL_PICKUP_STATE
  #SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=0
  G90

  ##############  Move in to zone  ##############
  {% if printer.toolhead.position.y < safe_zone_y %}
    G0 X{myself.zone[0]} Y{myself.zone[1]} F{zone_speed}
  {% else %}
    G0 Y{safe_zone_y} F{zone_speed}
    G0 X{myself.zone[0]} Y{myself.zone[1]} F{zone_speed}
  {% endif %}

  ##############  Move in to parking spot  ##############
  #G0 X{myself.zone[0]} Y{myself.zone[1]} F{zone_speed}
  G0 X{myself.park[0]} Y{myself.park[1]} F{park_speed}

  ##############  Lock Tool  ##############
  M400
  TOOL_LOCK
  SET_GCODE_OFFSET Z={myself.offset[2]} MOVE=1                   # Set and move the Z offset. Avoid crashing into bed when moving out later.

  ##############  Wait for heater  ##############
  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    M116 P{myself.name}                                             # Wait for tool to reach target temperature.
  {% endif %}

  ##############  Move out to zone  ##############
  G0 X{myself.zone[0]} Y{myself.zone[1]} F{park_speed}


[gcode_macro SUB_TOOL_PICKUP_END]
description: Internal subroutine
  T: Tool to pickup
variable_zone_speed: 10000
variable_safe_zone_y: 300
gcode:
  {%set myself = printer['tool '~params.T]%}
  
  ##############  Move out to Safe position  ##############
  G0 Y{safe_zone_y} F{zone_speed}

  ##############  Check Tool Lock  ##############
  #QUERY_ENDSTOPS
  #TOOL_LOCK_CHECK
  ASSERT_TOOL_DETECTED
 
  ##############  Finnish up  ##############
  M400
  #SET_GCODE_VARIABLE MACRO=HOMING_STATUS VARIABLE=maxx VALUE=1
  RESTORE_GCODE_STATE NAME=TOOL_PICKUP_STATE MOVE=0
  G90
  G1 X150 Y100 F3000
  SET_GCODE_OFFSET X={myself.offset[0]} Y={myself.offset[1]} Z={myself.offset[2]} MOVE=0
  G1 F3000
  #SUB_TOOL_PICKUP_DEPRESURIZE_HOTEND
  
###
### DROPOFF
###

[gcode_macro SUB_TOOL_DROPOFF_START]
description: Internal subroutine
  T: Tool to pickup
variable_zone_speed: 10000
variable_park_speed: 6000
variable_safe_zone_y: 300
gcode:
  {%set myself = printer['tool '~params.T]%}

  {% if myself.name|int != printer.toollock.tool_current|int %}
    { action_raise_error("SUB_TOOL_DROPOFF_START: Wrong tool. Asked to dropoff T" ~ myself.name ~ " while current is T" ~ printer.toollock.tool_current ~ ".") }
  {% endif %}

  RESPOND MSG="Will drop off T{myself.name} at X{myself.park[0]} Y{myself.park[1]}"

  {% if myself.extruder|default("none")|lower !="none" %}       # If the tool has an extruder:
    M568 P{myself.name} A1                                        # Put tool heater in standby
                                                                  # If can extrude and global purge is active:
    {% if printer[myself.extruder].can_extrude|default("false")|lower == 'true' and printer.toollock.purge_on_toolchange() %}
      G1 E-4 F2700                                                  # retract filament from meltzone
      G1 E2 F800                                                    # Extrude slightly to form a tip
      G1 E-{myself.meltzonelength} F800                             # Retract filament from meltzone
    {% endif %}
  {% endif %}

  SET_GCODE_OFFSET X=0 Y=0                                      # Set XY offset to 0 so we park the tool right.
  SAVE_GCODE_STATE NAME=TOOL_DROPOFF_STATE
  G90

  # Fast Move to the general pickup position for tools.
  {% if printer.toolhead.position.y|int < safe_zone_y %}
    G0 X{myself.zone[0]} Y{myself.zone[1]} F{zone_speed}
  {% else %}
    G0 Y{safe_zone_y} F{zone_speed}
    G0 X{myself.zone[0]} Y{myself.zone[1]} F{zone_speed}
  {% endif %}

  #G0 X{myself.zone[0]} Y{myself.zone[1]} F{zone_speed}
  G0 X{myself.park[0]} Y{myself.park[1]} F{park_speed}


[gcode_macro SUB_TOOL_DROPOFF_END]
description: Internal subroutine
  T: Tool to pickup
variable_zone_speed: 10000
variable_park_speed: 6000
variable_safe_zone_y: 300
gcode:
  {%set myself = printer['tool '~params.T]%}

  M400
  TOOL_UNLOCK

  G0 X{myself.zone[0]} Y{myself.zone[1]} F{park_speed}
  G0 Y{safe_zone_y} F{zone_speed}                         # Fast Move to the general pickup position for tools.
  M400

  RESTORE_GCODE_STATE NAME=TOOL_DROPOFF_STATE MOVE=0


###
### MACROS
###

[gcode_macro M106]
rename_existing: M106.1
variable_fan_speed: 0
description: Snnn Pnnn
  Set fan speed. A tool and toollock must be configured for this to work.
  S: Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  P: Tool (optional, defaults to the currently selected tool)
  The P parameter specifies tool instead of fan number as in RRF.
gcode:
  SET_AND_SAVE_FAN_SPEED {rawparams}

[gcode_macro M107]
rename_existing: M107.1
description: Pnnn
  Turn off fan.
  P: Tool (optional and defaults to the currently selected tool)
gcode:       
  {% if params.P is defined %}
    {% set p = " P"~params.P %}
  {% endif %}
  M106 {p|default("")} S0

[gcode_macro G10]
rename_existing: G10.1
description: See M568. Passtrough to M568.
gcode:
  M568 {rawparams}

[gcode_macro M568]
description: Pnnn Rnnn Snnn An Nnnn Mnnn
  Set tool temperature.
  P= Tool number, optional. If this parameter is not provided, the current tool is used.
  R= Standby temperature(s), optional
  S= Active temperature(s), optional
  A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature(s).
  N = Time in seconds to wait between changing heater state to standby and setting heater target temperature to standby temperature when standby temperature is lower than tool temperature.
      Use for example 0.1 to change immediately to standby temperature.
  O = Time in seconds to wait from docking tool to shutting off the heater, optional.
      Use for example 86400 to wait 24h if you want to disable shutdown timer.
gcode:
#  RESPOND MSG="M568: Seting new temperature: {rawparams}"
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # R= Standby temperature
  {% if params.R is defined %}
    {% set newparameters = newparameters ~ " STDB_TMP="~params.R %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # S= Active temperature
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " ACTV_TMP="~params.S %}                    # Set heater_active_temp to new parameters.
  {% endif %}

  # N = Time in seconds to wait from docking tool to putting the heater in standy
  {% if params.N is defined %}
    {% set newparameters = newparameters ~ " STDB_TIMEOUT="~params.N %}                  # Set idle_to_standby_time to new parameters.
  {% endif %}

  # M = Time in seconds to wait from docking tool to shuting off the heater
  {% if params.O is defined %}
    {% set newparameters = newparameters ~ " SHTDWN_TIMEOUT="~params.O %}                  # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  # A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature
  {% if params.A is defined %}
    {% set newparameters = newparameters ~ " CHNG_STATE="~params.A %}                            # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  {action_respond_info("M568: Running: SET_TOOL_TEMPERATURE"~newparameters)}
  SET_TOOL_TEMPERATURE{newparameters}

[gcode_macro M116]
description: Pnnn Hnnn Snnn
  Waits for all temperatures, or a specified tool or heater's temperature.
  This command can be used without any additional parameters.
  Without parameters it waits for bed and current extruder.
  Only one of either P or H may be used.
  Pnnn Tool number.
  Hnnn Heater number. 0="heater_bed", 1="extruder", 2="extruder1", etc.
  Snnn Tolerance in degC. Defaults to 1*C. Wait will wait until heater is between set temperature +/- tolerance.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutine in new format.
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL=" ~ params.P %}                   # Set Tool to new parameters.
  {% endif %}
  {% if params.H is defined %}
    {% set newparameters = newparameters ~ " HEATER=" ~ params.H %}                   # Set Tool to new parameters.
  {% endif %}
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " TOLERANCE=" ~ params.S %}                   # Set Tool to new parameters.
  {% endif %}
  TEMPERATURE_WAIT_WITH_TOLERANCE{newparameters}

